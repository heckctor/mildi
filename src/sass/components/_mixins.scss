@mixin animate($efecto:ease,$tiempo:.5s) {
    transition: all $efecto $tiempo;
}

@mixin shadow($ejeX: 0px,$ejeY: 0px,$blur: 5px,$alfa: 0.5) {
    -moz-box-shadow: $ejeX $ejeY $blur rgba(0,0,0,$alfa);
    box-shadow: $ejeX $ejeY $blur rgba(0,0,0,$alfa);
}
@mixin solidShadow($ejeX: 0px,$ejeY: 0px,$ejeZ:0px,$blur: 5px,$alfa:fade($black,50%)) {
    -moz-box-shadow: $ejeX $ejeY $ejeZ $blur $alfa;
    box-shadow: $ejeX $ejeY $ejeZ $blur $alfa;
}

@mixin font($size:$font-size-global) {
    $rem : $size / $font-size-global;
    font-size:$size*1px;//Fallback navegadores antiguos
    font-size: "#{$rem}rem";
}

@mixin textShadow($ejeX: 0px,$ejeY: 0px,$blur: 5px, $color: $black, $por:.5) {
    -moz-text-shadow: $ejeX $ejeY $blur rgba($color, $por);
    text-shadow: $ejeX $ejeY $blur rgba($color, $por);
}

@mixin from($breakpoint){
    @if map-has-key($breakpoints, $breakpoint){
        @media screen and (min-width:map-get($breakpoints, $breakpoint)){
         @content;
        }
    }@else if type-of($breakpoint) != number{
        $type:type-of($breakpoint);
        @error 'Este mixin solo recibe un parametro numerico en px, em ó rem, pero ha recibido el valor "#{$breakpoint}" el cual es del tipo "#{$type}"';
    }@else if unit($breakpoint) == 'px' or unit($breakpoint) == 'em' or unit($breakpoint) == 'rem'{
        @media screen and (min-width:$breakpoint){
         @content;
        }
    }@else{
        @error '#{$breakpoint} : No es un número válido usar unidades como "px", "em" ó "rem"';
    }
    
}

@mixin to($breakpoint){
    @if isValidBreakpoint($breakpoint){
        @media screen and (max-width:map-get($breakpoints, $breakpoint)){
         @content;
        }
    }@else if type-of($breakpoint) != number{
        $type:type-of($breakpoint);
        @error 'Este mixin solo recibe un parametro numerico en px, em ó rem, pero ha recibido el valor "#{$breakpoint}" el cual es del tipo "#{$type}"';
    }@else if unit($breakpoint) == 'px' or unit($breakpoint) == 'em' or unit($breakpoint) == 'rem'{
        @media screen and (max-width:$breakpoint){
         @content;
        }
    }@else{
        @error '#{$breakpoint}: No es un número válido usar unidades como "px", "em" ó "rem"';
    }
    
}

@mixin fromTo($from,$to){
    @if map-has-key($breakpoints, $from) and map-has-key($breakpoints, $to){
        @media screen and (min-width: $from) and (max-width: $to) {
         @content;
        }
    }
}

// @mixin fromTo($from,$to){
//     @media screen and (min-width: $from) and (max-width: ($to) - 1px) {
//         @content
//     }
// }

@mixin square($size){
  width: $size;
  height: $size;
  img{
    width: 100%;
  }
}

@mixin circle($size){
  width: $size;
  height: $size;
  border-radius: 50%;
  overflow: hidden;
  img{
    width: 100%;
  }
}

@mixin placeholder($color, $opacity) {
::placeholder {
    color: $color;
    opacity: $opacity; 
}

:-ms-input-placeholder { 
   color: $color;
}

::-ms-input-placeholder { 
   color: $color;
}
}


@mixin gradient($angulo:0deg,$colorA:$none,$colorB:$none,$colorC:$none,$imagen:$none) {
    background: -webkit-linear-gradient($angulo,$colorA,$colorB,$colorC)$imagen;
    background: -moz-linear-gradient($angulo,$colorA,$colorB,$colorC)$imagen;
    background: linear-gradient($angulo,$colorA,$colorB,$colorC)$imagen;
}

@mixin grid($selector,$num-cols,$gap:1rem){
    
    @media screen and(min-width:768px){
        display: flex;
        flex-wrap: wrap;
    }

    @if $selector == li {
        padding: 0;
        margin:0;
        list-style: none;
        li {
            margin-left : 0;
            list-style  : none;
        }
    }
    #{$selector},.#{$selector}{
        width: 100% / $num-cols;
        padding:$gap;
        background: tomato;
        border:solid 1px lime;
    }
    img {
        display : block;
    }
}